int matchCost(def src, def m, def ref)
{
    def tSrc = src.t;
    int posCost = 0;
    int len = m.length;
    for (int i = 0; i < len-1; ++i)
    {
        int delta = m[i+1] - m[i];
        if (delta <= 0)
            posCost += 4-delta;
        else
            posCost += delta-1;
    }
    int queryCost = 0;
    for (int i = 0; i < len; ++i)
        if (tSrc[m[i]]['t'] != ref[i])
            queryCost += 2;
    int formCost = 0;
    /*
    for (int i = 0; i < len; ++i)
        if (tSrc[m[i]]['t'] != tSrc[m[i]]['l'])
            formCost += 0;
    */
    int paperCost = (src.a ?: 0) + (src.v ?: 0);
    return posCost * 30 + queryCost * 10 + formCost + paperCost;
}

def ts = params.tList;
def ds = params.dList;
def ref = params.rList;
def pos = new ArrayList();
int len = ts.length;

for (int i = 0; i < len; ++i)
    pos.add(new ArrayList());

for (int i = 0; i < ds.length; ++i)
{
    def dt = ds[i].dt;
    def l1 = ts[ds[i].i1];
    def l2 = ts[ds[i].i2];
    for (int j = 0; j < params._source.d.length; ++j)
    {
        def d = params._source.d[j];
        if (dt.equals(d.dt) && l1.equals(d.l1) && l2.equals(d.l2))
        {
            pos[ds[i].i1].add(Integer.parseInt(d.i1));
            pos[ds[i].i2].add(Integer.parseInt(d.i2));
            break;
        }
    }
}
for (int i = 0; i < len; ++i)
{
    if (pos[i].size() == 0)
    {
        for (int j = 0; j < params._source.t.length; ++j)
            if (ts[i].equals(params._source.t[j].l))
                pos[i].add(j);
    }
}

def m = new ArrayList();
def match = new ArrayList();
def bestMatch = new ArrayList(match);
int bestCost = 2147483647;
for (int i = 0; i < len; ++i)
{
    m.add(0);
    if (pos[i].size() == 0)
        return '';
    match.add(pos[i][0]);
}

while (true)
{
    int cost = matchCost(params._source, match, ref);
    if (cost < bestCost)
    {
        bestCost = cost;
        bestMatch = match.clone();
    }

    m[len-1] += 1;
    def i = len-1;
    while (m[i] == pos[i].size())
    {
        m[i] = 0;
        match[i] = pos[i][0];
        i -= 1;
        if (i < 0)
            break;
        m[i] += 1;
    }
    if (i < 0)
        break;
    match[i] = pos[i][m[i]];
}


Map DICT = ["-LRB-":"(\\b", "-RRB-":"\\b)", "-LSB-":"[\\b", "-RSB-":"\\b]", "-LCB-":"{\\b", "-RCB-":"\\b}", "<":'<\\b', ">":'\\b>', "``":'"\\b', "''":'\\b"', "...":"\\b...", ",":"\\b,", ";":"\\b;", ":":"\\b:", "@":"\\b@", "%":"\\b%", "&":"&", ".":"\\b.", "?":"\\b?", "!":"\\b!", "*":"\\b*", "'":"\\b'", "'m":"\\b'm", "'M":"\\b'M", "'d":"\\b'd", "'D":"\\b'D", "'s":"\\b's", "'S":"\\b'S", "'ll":"\\b'll", "'re":"\\b're", "'ve":"\\b've", "n't":"\\bn't", "'LL":"\\b'LL", "'RE":"\\b'RE", "'VE":"\\b'VE", "N'T":"\\bN'T", "`":"'\\b"];
def total = '';
for (int i = 0; i < params._source.t.length; ++i)
{
    def stk = params._source.t[i].t;
    stk = DICT.getOrDefault(stk, stk);
    def tk = '';
    if (i != 0) tk = ' ';
    if (bestMatch.contains(i))
        tk += '<strong>' + stk + '</strong>';
    else
        tk += stk;
    total += tk;
}
total = total.replace(' \\b', '').replace('\\b ', '').replace(' <strong>\\b', '<strong>').replace('\\b</strong> ', '</strong>');
return total;
